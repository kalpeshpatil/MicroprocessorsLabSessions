C51 COMPILER V9.54   WM                                                                    09/21/2015 15:53:54 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE WM
OBJECT MODULE PLACED IN .\Objects\wm.obj
COMPILER INVOKED BY: D:\Programmes\Programmes\C51\BIN\C51.EXE ..\labsheet-7\labsheet-7\wm.c OPTIMIZE(8,SPEED) BROWSE DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\wm.lst) TABS(2) OBJECT(.\Objects\wm.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          
  20          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  21          sbit LCD_rs = P0^0;                 // LCD Register Select
  22          sbit LCD_rw = P0^1;                 // LCD Read/Write
  23          sbit LCD_en = P0^2;                 // LCD Enable
  24          sbit LCD_busy = P2^7;               // LCD Busy Flag
  25          sbit ONULL = P1^0;
  26          bit transmit_completed= 0;          // To check if spi data transmit is complete
  27          bit offset_null = 0;                // Check if offset nulling is enabled
  28          bit roundoff = 0;
  29          int adcVal=0, avgVal=0, initVal=0;
  30          unsigned char serial_data;
  31          unsigned char data_save_high;
  32          unsigned char data_save_low;
  33          unsigned char count=0, i=0;
  34          unsigned char weight[4];
  35          char take_samples;
  36          char temp;
  37          float fweight=0;
  38          
  39          /**
  40          
  41           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  42           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  43           *                   P1.4(SSbar)
  44                               P1.6(SCK)
  45           */
  46           
  47          void main(void)
  48          {
  49   1        P3 = 0X00;                      // Make Port 3 output 
  50   1        P2 = 0x00;                      // Make Port 2 output 
  51   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  52   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  53   1        
  54   1        SPI_Init();
C51 COMPILER V9.54   WM                                                                    09/21/2015 15:53:54 PAGE 2   

  55   1        LCD_Init();
  56   1        Timer_Init();
  57   1        
  58   1        while(1)                        // endless 
  59   1        { while(!take_samples){}
  60   2          take_samples =0;
  61   2          CS_BAR = 0;                 // enable ADC as slave     
  62   2          SPDAT= 0x01;                // Write start bit to start ADC 
  63   2          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 
  64   2          transmit_completed = 0;     // clear software transfert flag 
  65   2          
  66   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling
  67   2          while(!transmit_completed); // wait end of transmition 
  68   2          data_save_high = serial_data & 0x03 ;  
  69   2          transmit_completed = 0;     // clear software transfer flag 
  70   2              
  71   2          SPDAT= 0x00;                // 
  72   2          while(!transmit_completed); // wait end of transmition 
  73   2          data_save_low = serial_data;
  74   2          transmit_completed = 0;     // clear software transfer flag 
  75   2          CS_BAR = 1;                 // disable ADC as slave
  76   2          
  77   2          adcVal = (data_save_high <<8) + (data_save_low);
  78   2          
  79   2          
  80   2          LCD_CmdWrite(0x08);
  81   2          LCD_StringWrite("Voltage",7);
  82   2          
  83   2          LCD_CmdWrite(0xC0);
  84   2          
  85   2          adcVal = (adcVal*3)/10;
  86   2          
  87   2          LCD_DataWrite(adcVal/1000 + '0');
  88   2          
  89   2          temp = adcVal%1000;
  90   2          LCD_DataWrite(temp/100 + '0');
  91   2          
  92   2          temp = temp%100;
  93   2          LCD_DataWrite(temp/10 + '0');
  94   2          
  95   2          temp = temp%10;
  96   2          LCD_DataWrite(temp + '0');
  97   2          
  98   2          
  99   2          
 100   2        }
 101   1      }
 102          
 103          
 104          /**
 105           * FUNCTION_PURPOSE:interrupt
 106           * FUNCTION_INPUTS: void
 107           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 108           */
 109          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B */
 110          {
 111   1        switch  ( SPSTA )         /* read and clear spi status register */
 112   1        {
 113   2          case 0x80:  
 114   2            serial_data=SPDAT;   /* read receive data */
 115   2            transmit_completed=1;/* set software flag */
 116   2          break;
C51 COMPILER V9.54   WM                                                                    09/21/2015 15:53:54 PAGE 3   

 117   2      
 118   2          case 0x10:
 119   2               /* put here for mode fault tasking */  
 120   2          break;
 121   2        
 122   2          case 0x40:
 123   2               /* put here for overrun tasking */ 
 124   2          break;
 125   2        }
 126   1      }
 127          
 128          void timer0_ISR (void) interrupt 1
 129          {
 130   1        TH0 = 0x3C;                     //For 15ms operation
 131   1        TL0 = 0xB0;
 132   1        take_samples=1;
 133   1        count++;
 134   1      }
 135          
 136          
 137          /**
 138          
 139           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 140           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 141           *                   P1.4(SSbar)
 142                               P1.6(SCK)
 143           */ 
 144          void SPI_Init()
 145          {
 146   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 147   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 148   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 149   1        SPCON |= 0x10;                  // Master mode 
 150   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 151   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 152   1        IEN1 |= 0x04;                   // enable spi interrupt 
 153   1        EA=1;                           // enable interrupts 
 154   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 155   1      }
 156            /**
 157           * FUNCTION_PURPOSE:Timer Initialization
 158           * FUNCTION_INPUTS: void
 159           * FUNCTION_OUTPUTS: none
 160           */
 161          
 162          void Timer_Init()
 163          {
 164   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 165   1        // 65536 depending upon the calues of TH0 and TL0
 166   1        // The timer counts 65536 processor cycles. A processor cycle is 
 167   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 168   1        // By setting TH0TL0 to 3CB0H, the timer overflows every 25 ms
 169   1        
 170   1        TH0 = 0x3C;                     //For 25ms operation
 171   1        TL0 = 0xB0;
 172   1        TMOD = (TMOD & 0xF0) | 0x01;    // Set T/C0 Mode 
 173   1        ET0 = 1;                        // Enable Timer 0 Interrupts 
 174   1        TR0 = 1;                        // Start Timer 0 Running 
 175   1        count =0;
 176   1      }
 177            /**
 178           * FUNCTION_PURPOSE:LCD Initialization
C51 COMPILER V9.54   WM                                                                    09/21/2015 15:53:54 PAGE 4   

 179           * FUNCTION_INPUTS: void
 180           * FUNCTION_OUTPUTS: none
 181           */
 182          void LCD_Init()
 183          {
 184   1        sdelay(100);
 185   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 186   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 187   1        LCD_CmdWrite(0x01);     // Clear the LCD
 188   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 189   1      }
 190          
 191          /**
 192           * FUNCTION_PURPOSE: Write Command to LCD
 193           * FUNCTION_INPUTS: cmd- command to be written
 194           * FUNCTION_OUTPUTS: none
 195           */
 196          void LCD_CmdWrite(char cmd)
 197          {
 198   1        LCD_Ready();
 199   1        LCD_data=cmd;           // Send the command to LCD
 200   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 201   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 202   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 203   1        sdelay(5);
 204   1        LCD_en=0;
 205   1        sdelay(5);
 206   1      }
 207          
 208          /**
 209           * FUNCTION_PURPOSE: Write Command to LCD
 210           * FUNCTION_INPUTS: dat- data to be written
 211           * FUNCTION_OUTPUTS: none
 212           */
 213          void LCD_DataWrite( char dat)
 214          {
 215   1        LCD_Ready();
 216   1        LCD_data=dat;           // Send the data to LCD
 217   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 218   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 219   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 220   1        sdelay(5);
 221   1        LCD_en=0;
 222   1        sdelay(5);
 223   1      }
 224          /**
 225           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 226           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 227                              2. length - length of the array
 228           * FUNCTION_OUTPUTS: none
 229           */
 230          void LCD_StringWrite( char * str, unsigned char length)
 231          {
 232   1          while(length>0)
 233   1          {
 234   2              LCD_DataWrite(*str);
 235   2              str++;
 236   2              length--;
 237   2          }
 238   1      }
 239          
 240          /**
C51 COMPILER V9.54   WM                                                                    09/21/2015 15:53:54 PAGE 5   

 241           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 242           * FUNCTION_INPUTS: void
 243           * FUNCTION_OUTPUTS: none
 244           */
 245          void LCD_Ready()
 246          {
 247   1        LCD_data = 0xFF;
 248   1        LCD_rs = 0;
 249   1        LCD_rw = 1;
 250   1        LCD_en = 0;
 251   1        sdelay(5);
 252   1        LCD_en = 1;
 253   1        while(LCD_busy == 1)
 254   1        {
 255   2          LCD_en = 0;
 256   2          LCD_en = 1;
 257   2        }
 258   1        LCD_en = 0;
 259   1      }
 260          
 261          /**
 262           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 263           * FUNCTION_INPUTS: void
 264           * FUNCTION_OUTPUTS: none
 265           */
 266          void sdelay(int delay)
 267          {
 268   1        char d=0;
 269   1        while(delay>0)
 270   1        {
 271   2          for(d=0;d<5;d++);
 272   2          delay--;
 273   2        }
 274   1      }
 275          
 276          /**
 277           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 278           * FUNCTION_INPUTS: void
 279           * FUNCTION_OUTPUTS: none
 280           */
 281          void delay_ms(int delay)
 282          {
 283   1        int d=0;
 284   1        while(delay>0)
 285   1        {
 286   2          for(d=0;d<382;d++);
 287   2          delay--;
 288   2        }
 289   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    494    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
