C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LAB7B
OBJECT MODULE PLACED IN .\Objects\lab7b.obj
COMPILER INVOKED BY: D:\Programmes\Programmes\C51\BIN\C51.EXE lab7b.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\lab7b.lst) TABS(2) OBJECT(.\Objects\lab7b.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          
  20          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  21          sbit LCD_rs = P0^0;                 // LCD Register Select
  22          sbit LCD_rw = P0^1;                 // LCD Read/Write
  23          sbit LCD_en = P0^2;                 // LCD Enable
  24          sbit LCD_busy = P2^7;               // LCD Busy Flag
  25          sbit ONULL = P1^0;
  26          bit transmit_completed= 0;          // To check if spi data transmit is complete
  27          bit offset_null = 0;                // Check if offset nulling is enabled
  28          bit roundoff = 0;
  29          int adcVal=0, avgVal=0, initVal=0;
  30          unsigned char serial_data;
  31          unsigned char data_save_high;
  32          unsigned char data_save_low;
  33          unsigned char counter=0, i=0;
  34          //unsigned char weight[4];
  35          float fweight=0;
  36          int weight =0;
  37          
  38          char take_samples;
  39          
  40          int temp;
  41          
  42          /**
  43          
  44           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  45           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  46           *                   P1.4(SSbar)
  47                               P1.6(SCK)
  48           */
  49           
  50          void main(void)
  51          {
  52   1        P3 = 0X00;                      // Make Port 3 output 
  53   1        P2 = 0x00;                      // Make Port 2 output 
  54   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 2   

  55   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  56   1        
  57   1        SPI_Init();
  58   1        LCD_Init();
  59   1        Timer_Init();
  60   1        
  61   1        while(1)                        // endless 
  62   1        {
  63   2          while(!take_samples)
  64   2          {}
  65   2          take_samples = 0;
  66   2          CS_BAR = 0;                 // enable ADC as slave     
  67   2          SPDAT= 0x01;                // Write start bit to start ADC 
  68   2          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 
  69   2          transmit_completed = 0;     // clear software transfert flag 
  70   2          
  71   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling
  72   2          while(!transmit_completed); // wait end of transmition 
  73   2          data_save_high = serial_data & 0x03 ;  
  74   2          transmit_completed = 0;     // clear software transfer flag 
  75   2              
  76   2          SPDAT= 0x00;                // 
  77   2          while(!transmit_completed); // wait end of transmition 
  78   2          data_save_low = serial_data;
  79   2          transmit_completed = 0;     // clear software transfer flag 
  80   2          CS_BAR = 1;                 // disable ADC as slave
  81   2          
  82   2          adcVal = (data_save_high <<8) + (data_save_low);
  83   2          
  84   2          
  85   2          
  86   2          //P2 = 0x00;                      // Make Port 2 output 
  87   2          //LCD_Init();
  88   2          
  89   2          
  90   2        }
  91   1      }
  92          
  93          
  94          /**
  95           * FUNCTION_PURPOSE:interrupt
  96           * FUNCTION_INPUTS: void
  97           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  98           */
  99          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B */
 100          {
 101   1        switch  ( SPSTA )         /* read and clear spi status register */
 102   1        {
 103   2          case 0x80:  
 104   2            serial_data=SPDAT;   /* read receive data */
 105   2            transmit_completed=1;/* set software flag */
 106   2          break;
 107   2      
 108   2          case 0x10:
 109   2               /* put here for mode fault tasking */  
 110   2          break;
 111   2        
 112   2          case 0x40:
 113   2               /* put here for overrun tasking */ 
 114   2          break;
 115   2        }
 116   1      }
C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 3   

 117          
 118          void timer0_ISR (void) interrupt 1
 119          {
 120   1        TH0 = 0x3C;                     //For 15ms operation
 121   1        TL0 = 0xB0;
 122   1        take_samples=1;
 123   1        
 124   1        
 125   1          fweight = fweight + adcVal;
 126   1          counter ++;
 127   1          
 128   1          if(counter == 9)
 129   1          {
 130   2            counter = 0;
 131   2            fweight = (fweight*6.7)/10-72;
 132   2            weight = (int)fweight;
 133   2            
 134   2            LCD_CmdWrite(0x80);
 135   2            LCD_StringWrite("Weight",6);
 136   2            LCD_CmdWrite(0xCB);
 137   2          
 138   2            LCD_DataWrite(weight/1000 + '0');
 139   2          
 140   2            temp = weight%1000;
 141   2            LCD_DataWrite(temp/100 + '0');
 142   2          
 143   2            temp = temp%100;
 144   2            LCD_DataWrite(temp/10 + '0');
 145   2          
 146   2            temp = temp%10;
 147   2            LCD_DataWrite(temp + '0');
 148   2          
 149   2            fweight = 0;
 150   2          
 151   2          
 152   2            }
 153   1          
 154   1      }
 155          
 156          
 157          /**
 158          
 159           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 160           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 161           *                   P1.4(SSbar)
 162                               P1.6(SCK)
 163           */ 
 164          void SPI_Init()
 165          {
 166   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 167   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 168   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 169   1        SPCON |= 0x10;                  // Master mode 
 170   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 171   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 172   1        IEN1 |= 0x04;                   // enable spi interrupt 
 173   1        EA=1;                           // enable interrupts 
 174   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 175   1      }
 176            /**
 177           * FUNCTION_PURPOSE:Timer Initialization
 178           * FUNCTION_INPUTS: void
C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 4   

 179           * FUNCTION_OUTPUTS: none
 180           */
 181          
 182          void Timer_Init()
 183          {
 184   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 185   1        // 65536 depending upon the calues of TH0 and TL0
 186   1        // The timer counts 65536 processor cycles. A processor cycle is 
 187   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 188   1        // By setting TH0TL0 to 3CB0H, the timer overflows every 25 ms
 189   1        
 190   1        TH0 = 0x3C;                     //For 25ms operation
 191   1        TL0 = 0xB0;
 192   1        TMOD = (TMOD & 0xF0) | 0x01;    // Set T/C0 Mode 
 193   1        ET0 = 1;                        // Enable Timer 0 Interrupts 
 194   1        TR0 = 1;                        // Start Timer 0 Running 
 195   1        counter =0;
 196   1      }
 197            /**
 198           * FUNCTION_PURPOSE:LCD Initialization
 199           * FUNCTION_INPUTS: void
 200           * FUNCTION_OUTPUTS: none
 201           */
 202          void LCD_Init()
 203          {
 204   1        sdelay(100);
 205   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 206   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 207   1        LCD_CmdWrite(0x01);     // Clear the LCD
 208   1        //LCD_CmdWrite(0x80);     // Cursor to First line First Position
 209   1      }
 210          
 211          /**
 212           * FUNCTION_PURPOSE: Write Command to LCD
 213           * FUNCTION_INPUTS: cmd- command to be written
 214           * FUNCTION_OUTPUTS: none
 215           */
 216          void LCD_CmdWrite(char cmd)
 217          {
 218   1        LCD_Ready();
 219   1        LCD_data=cmd;           // Send the command to LCD
 220   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 221   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 222   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 223   1        sdelay(5);
 224   1        LCD_en=0;
 225   1        sdelay(5);
 226   1      }
 227          
 228          /**
 229           * FUNCTION_PURPOSE: Write Command to LCD
 230           * FUNCTION_INPUTS: dat- data to be written
 231           * FUNCTION_OUTPUTS: none
 232           */
 233          void LCD_DataWrite( char dat)
 234          {
 235   1        LCD_Ready();
 236   1        LCD_data=dat;           // Send the data to LCD
 237   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 238   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 239   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 240   1        sdelay(5);
C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 5   

 241   1        LCD_en=0;
 242   1        sdelay(5);
 243   1      }
 244          /**
 245           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 246           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 247                              2. length - length of the array
 248           * FUNCTION_OUTPUTS: none
 249           */
 250          void LCD_StringWrite( char * str, unsigned char length)
 251          {
 252   1          while(length>0)
 253   1          {
 254   2              LCD_DataWrite(*str);
 255   2              str++;
 256   2              length--;
 257   2          }
 258   1      }
 259          
 260          /**
 261           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 262           * FUNCTION_INPUTS: void
 263           * FUNCTION_OUTPUTS: none
 264           */
 265          void LCD_Ready()
 266          {
 267   1        LCD_data = 0xFF;
 268   1        LCD_rs = 0;
 269   1        LCD_rw = 1;
 270   1        LCD_en = 0;
 271   1        sdelay(5);
 272   1        LCD_en = 1;
 273   1        while(LCD_busy == 1)
 274   1        {
 275   2          LCD_en = 0;
 276   2          LCD_en = 1;
 277   2        }
 278   1        LCD_en = 0;
 279   1      }
 280          
 281          /**
 282           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 283           * FUNCTION_INPUTS: void
 284           * FUNCTION_OUTPUTS: none
 285           */
 286          void sdelay(int delay)
 287          {
 288   1        char d=0;
 289   1        while(delay>0)
 290   1        {
 291   2          for(d=0;d<5;d++);
 292   2          delay--;
 293   2        }
 294   1      }
 295          
 296          /**
 297           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 298           * FUNCTION_INPUTS: void
 299           * FUNCTION_OUTPUTS: none
 300           */
 301          void delay_ms(int delay)
 302          {
C51 COMPILER V9.54   LAB7B                                                                 09/21/2015 15:56:29 PAGE 6   

 303   1        int d=0;
 304   1        while(delay>0)
 305   1        {
 306   2          for(d=0;d<382;d++);
 307   2          delay--;
 308   2        }
 309   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    653    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
