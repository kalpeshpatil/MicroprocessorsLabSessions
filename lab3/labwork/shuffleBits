ORG 00H
	LJMP MAIN
	DELAY:
	USING 0	;ASSEMBLER DIRECTIVE TO INDICATE REGISTER BANK0
        PUSH PSW
        PUSH AR1; STORE R1 (BANK O) ON THE STACK
        PUSH AR2
		PUSH AR3
		
			MOV A,4FH		;GET VALUE OF D
			MOV B,#0AH		;MULTIPLY BY 10 TO GET DESIRED SECONDS OF DELAY
			MUL AB
			MOV R3,A		;RUN THE LOOP FOR EQUAL TO PRODUCT NUMBER 
			LOOP:
			MOV R2,#200
			BACK1:
			MOV R1,#0FFH
			BACK:
			DJNZ R1, BACK
			DJNZ R2, BACK1
			DJNZ R3, LOOP		
		POP AR3
		POP AR2 ; POP MUST BE IN REVERSE ORDER OF PUSH
        POP AR1
        POP PSW
        RET
		
	READNIBBLE:
	USING 0	;ASSEMBLER DIRECTIVE TO INDICATE REGISTER BANK0
        PUSH PSW
        PUSH AR1
		PUSH AR0
	
			LOOP5:
			MOV P1,#0F0H		;TURN ON ALL LEDS FOR 5 SEC
			MOV 4FH,#0AH		;WAIT FOR 5 SEC
			LCALL DELAY
			MOV P1,#0FH			;TURN OFF ALL LEDS
			MOV A,P1			;TAKE INPUT FROM SWITCHES		
			ANL A,#0FH		
			MOV R0,A
			SWAP A
			ORL A,R0
			MOV R1,A
			MOV 4FH,#02H
			LCALL DELAY
			MOV A,R1
			MOV P1,A			;SHOW OUTPUT ON LEDS
			MOV 4FH,#0AH		;5 SEC DELAY
			LCALL DELAY
			MOV P1, #00H
			MOV A,P1
			CJNE A,#00H,LOOP5
			MOV 4EH,R0					
        POP AR0
		POP AR1				; POP MUST BE IN REVERSE ORDER OF PUSH
        POP PSW
        RET
		
		MERGER:			;TO MERGE TWO NIBBLES INTO 1 BYTE
		PUSH PSW
		PUSH AR0
		PUSH AR1
			MOV 4EH,#00H
			LCALL READNIBBLE
			MOV R0,4EH
			LCALL READNIBBLE
			MOV A,4EH
			SWAP A
			ORL A,R0
			MOV 4FH,A
		POP AR1
		POP AR0
		POP PSW
		RET
		
		READVALUES:
		PUSH PSW
		PUSH AR0
		PUSH AR1
		MOV R0,50H
		MOV R1,51H
		LOOP7:
		LCALL MERGER
		MOV @R1,4FH
		INC R1
		DJNZ R0,LOOP7
		POP AR1
		POP AR0
		POP PSW
		RET	

DISPLAY:
PUSH PSW
PUSH AR0
PUSH AR1
        MOV R0,50H                        ;READING K
        MOV P1,#0FH

        BIGLOOP:        MOV P1,#0FH
                        MOV 4FH,#04H
                        LCALL DELAY                ;DELAY
                        MOV R1,51H                ;POINTER READ REPEATEDLY EVERY TIME
                        MOV A,P1
                        MOV R4,A		;SAVE THE READ VALUE FOR FUTURE USE
                        CLR C
                        SUBB A,R0		;CHECKING IF INDEX GREATER 
                        JNC STOP		;IF GREATER THEN SWITCH OFF ALL LEDS
                        MOV A,R4
                        ADD A,R1
                        MOV R1,A
                        MOV A,@R1
                        MOV P1,#0FH
                        ANL A,#0F0H
                        MOV P1,A
                        MOV 4FH,#04H
                        LCALL DELAY
                        MOV A,@R1		;LOWER NIBBLE DISPLAY
                        ANL A,#0FH
                        SWAP A
                        MOV P1,A
                        MOV 4FH,#04H
                        LCALL DELAY
                SJMP BIGLOOP
				POP AR1
				POP AR0
				POP PSW

        STOP: MOV P1,#0FH
                  SJMP STOP
				  
				  SHUFFLEBITS:
				  PUSH PSW
				  PUSH AR0
				  PUSH AR1
				  PUSH AR2
				  MOV R0,51H
				  MOV R1,52H
				  MOV R2,50H
				  DEC R2		;LAST XOR OPERATION INDIVIDUALLY
				  ARRAYFORM:
				  MOV A,@R0
				  INC R0
				  XRL A,@R0
				  MOV @R1,A
				  INC R1
				  DJNZ R2,ARRAYFORM
				  MOV A,@R0
				  MOV R0,51H
				  XRL A,@R0
				  MOV@R1,A
					POP AR2
					POP AR1
					POP AR0
					POP PSW
					RET
		
ORG 200H
MAIN:
MOV SP,#0CFH;-----------------------Initialize STACK POINTER
MOV 50H,#03H;------------------------Set value of K
MOV 51H,#60H;------------------------Array A start location
MOV 4FH,#00H;------------------------Clear location 4FH
LCALL READVALUES
MOV 50H,#03H;------------------------Value of K
MOV 51H,#60H;------------------------Array A start location
MOV 52H,#70H;------------------------Array B start location
LCALL SHUFFLEBITS
MOV 50H,#03H;------------------------Value of K
MOV 51H,#70H;------------------------Array B start Location
LCALL DISPLAY;----------------Display the last four bits of elements on LEDs
here:SJMP here;---------------------WHILE loop(Infinite Loop)
END